<?php

/**
 * Please fix the items marked with "@TODO" in this class
 *
 * Follow the https://www.php-fig.org/psr/psr-2/ coding style guide.
 *
 * One exception to PSR-2: opening braces MUST always be on the same line
 * for classes, methods, functions, and control structures
 */
class Singleton
{
    private $str;
    // @TODO Implement Singleton functionality

    /**
     * set default value
     */
    function __construct()
    {
        $this->str = "";
    }

    /**
     * @param string $value
     * @return string
     */
    public function validateAndSanitize($value)
    {
        $value = filter_var($value, FILTER_SANITIZE_STRING);
        return $value;
    }

    /**
     * Display user name
     *
     * @param string $name User-provided name
     */
    public function userEcho($name)
    {
        // @TODO Validate & sanitize $name
        $name = $this->validateAndSanitize($name);
        echo "The value of 'name' is '{$name}'";
    }

    /**
     * Query by user name
     *
     * @param string $name User-provided name
     */
    public function userQuery($name)
    {
        // @TODO Validate & sanitize $name
        //for old php version less than 5.4
        $name = $this->validateAndSanitize($name);
        $name = mysql_real_escape_string($name);
        mysql_query("SELECT * FROM `test` WHERE `name` = '{$name}' LIMIT 1");
//        another solution
//        $dbc="DB connection";
//        $query = mysqli_prepare($dbc, "SELECT * FROM `test` WHERE `name` = ? LIMIT 1");
//        mysqli_stmt_bind_param($query, "s", $name);
//        mysqli_stmt_execute($query);

    }

    /**
     * Output the contents of a file
     *
     * @param string $path User-provided file path
     */
    public function userFile($path)
    {
        // @TODO Validate & sanitize $path
        $path = $this->validateAndSanitize($path);
        readfile($path);
    }

    /**
     * Nested conditions
     */
    public function nestedConditions($conditionA, $conditionB, $conditionC)
    {
        // @TODO Untangle nested conditions
        if ($conditionA && $conditionB && $conditionC) {
            echo 'ABC';
        } elseif ($conditionA && $conditionB && !$conditionC) {
            echo '^C';
        } elseif ($conditionA && !$conditionB) {
            echo '^B';
        } else {
            echo '^A';
        }
    }

    /**
     * Return statements
     *
     * @return boolean
     */
    public function returnStatements($conditionA)
    {
        // @TODO Fix
        if ($conditionA) {
            echo 'A';
            return true;
        } else {
            return false;
        }
    }

    /**
     * Null coalescing
     */
    public function nullCoalescing()
    {
        // @TODO Simplify
        $name = $_GET['name'] ?? $_POST['name'] ?? 'nobody';
        return $name;
    }

    /**
     * @param $str set value
     * @return $this
     */
    public function setStrA($str)
    {
        $this->str .= $str;
        return $this;
    }

    /**
     * @param $str set value
     * @return $this
     */
    public function setStrB($str)
    {
        $this->str .= $str;
        return $this;
    }

    /**
     * Method chaining
     */
    public function methodChained()
    {
        // @TODO Implement method chaining
        return $this->str;
    }
    /**
     * to call method chaining $obj = new Singleton();
     * echo $obj->setStrA("string A")->setStrB("string B")->methodChained();
     */
    /**
     * Immutables are hard to find
     */
    public function checkValue($value)
    {
        $result = null;

        // @TODO Make all the immutable values (int, string) in this class
        // easily replaceable
        switch ($value) {
            case 'stringA':
                $result = 1;
                break;

            case 'stringB':
                $result = 2;
                break;

        }

        return $result;
    }

    /**
     * Check a string is a 24 hour time
     *
     * @return boolean
     * @example "00:00:00", "23:59:59", "20:15"
     */
    public function regexTest($time24Hour)
    {
        // @TODO Implement RegEx and return type; validate & sanitize input
        $time24Hour = $this->validateAndSanitize($time24Hour);
        return preg_match('/^([01][0-9]|2[0-3]):([0-5][0-9])|([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/', $time24Hour);
    }

}

/*EOF*/
